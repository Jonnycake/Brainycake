Traditional Brainfuck:
----------------------
>            Increment pointer
<            Decrement pointer
+            Increment value at pointer
-            Decrement value at pointer
,            Get character from input stream
.            Output character to output stream
[            Start a while loop
]            Go back to the matching bracket

Shortcuts:
----------
^            Set value at pointer to 0
|a|          Add value a to the value at pointer
_            Go back to pointer 0
\string\     Print string to output stream
;            Read string onto stack stopping at newline (null 
             delimited)
&            Output the (null delimited) string at stack pointer
=            Clear/initialize function/program stack
             (contextual)
²            Square value at extended register 1
³            Cube value at extended register 1
s            Switch value at pointer with value in register 1
c            Clear screen (nasty system call to cls (windows) or 
             clear (linux))
*            Set value at pointer to random between 0-255
~            Perform bitwise not on the value at the pointer

Comments:
---------
# comment    Single line comment
/comment/    Multiline comment

Debugging:
----------
h            Output hexadecimal equivilent of value at pointer
d            Output decimal equivilent of value at pointer
v            Toggle verbose mode
?            Breakpoint (with debug output)
@            Signal error condition
!            Toggle step by step mode (with debug output if
             running in verbose mode)
p0-9         Print value in specified register

Functions:
----------
(name)        Initialize function name
(name:code)   Define function
`name`        Call function defined by name
i{somefile}   Include somefile (for externally defined 
              functions)

Conditionals:
-------------
{a,b:code}  If a < value at pointer < b, execute code
{a,:code}   If a < value at pointer, execute code
{,a:code}   If a > value at pointer, execute code
{a=b:code}  If a <= value at pointer <= b, execute code
{a=:code}   If a <= value at pointer, execute code
{=a:code}   If a >= value at pointer, execute code
{!a:code}   If a != value at pointer, execute code

Jumps:
------
j{a}       Jump pointer to a
j{$a}      Jump pointer to value in register a
j{}        Absolute jump pointer to value in pointer
j[a]       Relative jump a instructions (negative for backward 
           jump)
j[$a]      Relative jump pointer to value in register a
j[]        Relative jump pointer to value in pointer

Stack:
------
"            Push value at pointer onto stack
'            Pop value off the stack into the pointer
r"           Push value in register 1 onto stack
e"           Push value in extended register 1 onto stack
r'           Pop value off the stack into register 1
e'           Pop value off the stack into extended register 1

Registers:
----------
$0           Nop - Read-only register, always holds 0
$1           Put value at pointer into register 1
$2           Put value at pointer into register 2
$3           Put value at pointer into register 3
$4           Put value at pointer into register 4
$5           Put value at pointer into extended register 1
$6           Put value at pointer into extended register 2
$7           Put value at pointer into extended register 3
$8           Put value at pointer into extended register 4
$9           Put value at pointer into extended register 5
$b           Put value at pointer into base pointer (not
             general purpose)
$s           Put value at pointer into stack pointer (not
             general purpose)
$i           Put value at pointer into instruction pointer
             (not general purpose) - essentially implements
             function return
$t           Put value at pointer into tape pointer (basic
             -ally an absolute jump)
$+           Add value at pointer to register 1
$-           Subtract value at pointer from register 1
$*           Multiply value at pointer to register 1
$/           Divide register 1 by pointer
$%           Perform modulo on register 1 by value at pointer
$&           Bitwise AND register 1 with pointer
$|           Bitwise OR register 1 with pointer
$^           Bitwise XOR register 1 with pointer
$!           Bitwise NOT on register 1
$p{a}        Associate register a with the pointer (copies
             current value of pointer to register a, any
             changes to a are made to p)
${a*b}       Multiply register a times register b
${a/b}       Divide register a by register b
${a+b}       Add register b to register a
${a-b}       Subtract register b from register a
${a%b}       Modulo division of a by b into a
${a,b}       Copy value from register a to register b
${a&b}       Bitwise AND register a with register b
${a|b}       Bitwise OR register a with register b
${a^b}       Bitwise XOR register a with register b
${!a}        Bitwise NOT register a
${'a}        Pop the value off the stack into register a
${"a}        Push the value in register a onto stack
${,a}        Copy the value from the tape pointer to reg-
             ister a
${a,}        Copy the value from register a to tape


Fun Stuff:
----------
¢, £, ¥, or € Ascii bell (cha-ching :P)
©, ®, or ™    Print "I'm a profiteering glutton" and ©, ®, or ™ 
              respectively
ßµÅ           Print "Hackers Manifesto"


Additional Notes:
  - Conditionals can be nested
  - Values to be compared to can be held in registers
    - Simply place register identifier like $1 in place of a/b
  - Return values should be stored in register 1
    - These may include an address to a point on the stack
      - If this is the case, the caller should temporarily move
        the stack pointer to that location, it should then pop
        the value off of the stack
  - Function stacks are automatically cleared when the function 
    returns
  - Prior to including a file, you must initialize the names of
    the functions you want from it
    - If the included file does not define all the required 
      functions, an error will be thrown
  - Functions may not define new functions, however, they may 
    initialize the function names and include other files
    - These functions, however, will only be accessible from
      within the scope of the function
  - Included files, may forward the request for a function to a 
    different file by initializing the function name and then 
    including the file
    - Therefore in any included file, the includes that contain 
      required functions will be parsed first
  - Extended registers are stored as long int
    - The normal registers are stored as char
  - The p0-9 will output formatted based on the register
    - If it is a normal register, it will be printed as char
    - If it is an extended register, it will be printed as int
    - If it is 0, it will print the word NULL
  - Function arguments should be passed on the stack
  - Programs will be read in and stored in memory without comments 
    or whitespaces
    - This is important to keep in mind when use relative or absolute
      jumps
  - When jumping, no check is performed to find out if we jumped
    into/out of a loop or into a conditional
    - This can have unintended consequences
  - When pushing onto the stack, the push will translate the next 4
    cells into an integer
    - Likewise when popping they will be converting back to 4 chars
  - When using the stack, you must set s->sp and s->bp appropriately
    following standard conventions (function prologue and epilogue)
    - These are $s and $b respectively
    - These must be reset upon return
  - When function calls are made, the function being executed gets
    its own version of the tape to avoid any unintended side-effects
    from the function
    - If the function needs cells in the tape to be set up by the
      caller, the caller will push those setups onto the stack and
      the function will pop them off in the correct location
  - Brainycake code will be loaded up in the beginning onto the stack
    - We will follow a similar functionality of CPUs (with instruction
      pointer)
    - Doing this will allow us to alter code as it's being executed
    - It will also allow us to evaluate code on the fly
  - The code loaded on the stack will be started at the very bottom of
    the stack (cell 0)
    - The code will be translated to integer for storage
    - The cell it stops at will be defined by a limit on the length of
      the text section
    - The stack will also be of a fixed size (unless otherwise defined
      by a setting which may or may not be implemented)
  - The stack will provide no access protection (for rwx, over/under-
    flows, or function scope)
    - This will allow for passing "variables" by reference
  - Registers should be preserved by the callee (besides $i)
    - $i should be upated automatically as a result of jumps, function
      calls, and returns
  - Garbage collection to avoid memory leaks will be done automatical-
    ly, however may not be guaranteed to work if an over/under-flow
    occurs
  - Upon the first successful interpretation of a .bc file, a .bcb
    file will be generated containing a saved state of the stack
    and registers to be loaded by bcinterpreter
    - This format is basically going to be bytecode, effectively
      cacheing the starting execution state allowing for quicker
      interpretation on the next run
  - The brainycake compiler (bcc) will first compile into C code
    - The C code will utilize the library built for the interpreter
      to make it easier to generate actual code
    - NOTE: At some point I may update this to compile directly to
      assembly, however I feel that it may be best to leave the C
      intermediate to take advantage of their compiler optimizations.
  - POTENTIAL ENHANCEMENT: Allow for extensions to be added at runtime
    - Extensions could be made of .bcb files containing a variety of
      functions
  - The tape will be made up of signed chars (this is to allow for
    easily looping through all characters in the ASCII charset)
  - A function backtrace will be kept throughout execution (to allow
    for easy debugging)
    - This backtrace will be kept in a reserved memory location at
      the very top of the stack
    - The backtrace will be of a fixed maximum length represented by
      the allowed number of nested function calls
  - The char registers ($0-$4) consist of unsigned chars
  - The extended registers ($5-$9, $i, $t, $b, $s) consist of signed
    integers
  - POTENTIAL ENHANCEMENT: Stack modes
    - Allow for differing stack widths (8 bit, 32 bit, or 64 bit)
      configurable by command line option
    - Potentially allow for program to specify the stack mode it
      wants to operate under
      - Should only be allowed once at the beginning of the program
        - Specify by numeric operator
          - 1 = 8 bit  (1 byte)
          - 4 = 32 bit (4 byte)
          - 8 = 64 bit (8 byte)
    - May have to rethink working with registers however, could
      limit our ability to push extended registers onto the stack
